{
    "collab_server" : "",
    "contents" : "function(input, output) {\n\n  # TAB 1 INPUT FILE TO NIS ----  \n  df_products_upload <- reactive({\n    inFile <- input$target_upload\n    if (is.null(inFile))\n      return(NULL)\n    filename <- inFile$datapath\n    # if (length(df$Conflict) != 0){\n    #   df<-filter(df, df$Conflict != \"Dismissed\")\n    # }\n    \n    fname <- filename\n    c$login(\"test_user\")\n    print(\"Logged in\")\n    c$open_session()\n    print(\"Session opened\")\n    n <- c$load_workbook(fname, \"NIS_agent\", \"NIS_agent@1\")\n    print(paste(\"N worksheets: \",n))\n    r <- c$submit()\n    print(\"Returned from submit\")\n    r <- c$query_available_datasets()\n    ds <- c$query_datasets(c(tuple(\"flow_graph_solution\", \"csv\", \"dataframe\")))\n    df <- py_to_r(ds[[1]][[3]])\n    df<-subset(df,select = -c(Conflict_Partof,Conflict_Itype,Computed,Expression,Observer))\n    df$Value<-as.numeric(lapply(df$Value,str_replace ,pattern = \",\",replacement = \".\"))\n    return(df)\n  })\n  \n  \n  output$sample_table<- renderDataTable({\n    df <- df_products_upload()\n    DT::datatable(df)\n  })\n  \n  # TAB 2 FIRST PIE -------\n  # INPUTS: \n  \n  output$scenario = renderUI({\n    datos<-df_products_upload()\n    Scenarios <<- as.vector(unique(datos$Scenario))\n    selectInput('scenario', \"Choose a Scenario:\", Scenarios)\n  })\n  \n  output$scope = renderUI({\n    datos<-df_products_upload()\n    Scopes<<- as.vector(unique(datos$Scope))\n    selectInput('scope', \"Choose a Scope:\", Scopes)\n  })\n  \n  \n  output$period = renderUI({\n    datos<-df_products_upload()\n    datos$Period<-as.numeric(datos$Period)\n    Periods<<- as.vector(unique(datos$Period))\n    selectInput('period',  \"Choose a Period:\", Periods, selected = 2017)\n  })\n  \n  \n  output$level = renderUI({\n    datos<-df_products_upload()\n    Level <<-as.vector(unique(datos$Level))\n    selectInput('level', \"Choose a level:\", Level)\n  })\n  \n  \n  \n  output$interface = renderUI({\n    datos<-df_products_upload()\n    Interfaces<<- as.vector(unique(datos$Interface))\n    selectInput('interface', \"Choose an Interface:\", Interfaces)\n  })\n  \n  \n  \n  \n  #PieChart Level\n  \n  output$PiePlot <- renderPlot({\n    if (input$act==0)\n      return()\n    \n    #TODO  % Value\n    \n    datos<<-df_products_upload()\n    dff <<- filter(datos,datos$Scenario == input$scenario & datos$Period == input$period & datos$Level == input$level & datos$Interface == input$interface, datos$Scope == input$scope)\n    dff$per<-round(dff$Value/sum(dff$Value)*100, digits = 3)\n    dff$names_per <-paste(dff$Processor,dff$per,\"%\", sep = \" \")\n    plt <- ggplot (dff, aes( x = \"\" ,  y = Value, fill = names_per)) + geom_bar(width = 1, stat = \"identity\")\n    pie <- plt + coord_polar(\"y\", start=0)\n    pie\n  })\n  \n  \n  \n  \n  # TAB 3 PIE BY SYSTEM  ----\n  # Reactive Inputs\n  \n  output$scenario2 = renderUI({\n    datos<-df_products_upload()\n    Scenarios <- as.vector(unique(datos$Scenario))\n    selectInput('scenario2', \"Choose a Scenario:\", Scenarios)\n  })\n  \n  output$scope2 = renderUI({\n    datos<-df_products_upload()\n    Scopes<<- as.vector(unique(datos$Scope))\n    selectInput('scope2', \"Choose a Scope:\", Scopes)\n  })\n  \n  \n  output$period2 = renderUI({\n    datos<-df_products_upload()\n    datos$Period<-as.numeric(datos$Period)\n    Periods<- as.vector(unique(datos$Period))\n    selectInput('period2',  \"Choose a Period:\", Periods)\n  })\n  \n  \n  \n  output$interface2 = renderUI({\n    datos<-df_products_upload()\n    Interfaces<- as.vector(unique(datos$Interface))\n    selectInput('interface2', \"Choose an Interface:\", Interfaces)\n  })\n  \n  \n  \n  #PieChart System\n  output$PiePlotSystem <- renderPlot({\n    if (input$act==0)\n      return()\n    #TODO  % Values \n    data<-df_products_upload()\n    \n    \n    #df$valper <- round(df$Value/sum(df$Value)*100, digits = 3)\n    plt <- ggplot (df, aes( x = \"\" ,  y = Value, fill = System)) + geom_bar(width = 1, stat = \"identity\")\n    pie <- plt + coord_polar(\"y\", start=0)\n    pie\n  })\n  \n  \n  \n  #TAB 4 PIE BY PROCESSOR ------\n  # Reactive Inputs:\n  \n  output$scenario3 = renderUI({\n    datos<-df_products_upload()\n    Scenarios <- as.vector(unique(datos$Scenario))\n    selectInput('scenario3', \"Choose a Scenario:\", Scenarios)\n  })\n  \n  output$scope3 = renderUI({\n    datos<-df_products_upload()\n    Scopes<- as.vector(unique(datos$Scope))\n    selectInput('scope3', \"Choose a Scope:\", Scopes)\n  })\n  \n  output$period3 = renderUI({\n    datos<-df_products_upload()\n    datos$Period<-as.numeric(datos$Period)\n    Periods<- as.vector(unique(datos$Period))\n    selectInput('period3',  \"Choose a Period:\", Periods)\n  })\n  \n  \n  \n  output$interface3 = renderUI({\n    datos<-df_products_upload()\n    Interfaces<- as.vector(unique(datos$Interface))\n    selectInput('interface3', \"Choose an Interface:\", Interfaces)\n  })\n  \n  output$ProcessorsChoice = renderUI({\n    datos<-df_products_upload()\n    Processors<- as.vector(unique(datos$Processor))\n    checkboxGroupInput(\"ProcessorsChoice\", \"Processors to compare:\",\n                       choiceNames = Processors, choiceValues = Processors, selected = Processors[1])\n  })\n  \n  #PieChart Processors\n  output$PiePlotProcessors <- renderPlot({\n    if (input$act==0)\n      return()\n    #TODO  % Values\n    data<-df_products_upload()  \n    df <- filter(data,data$Scenario == input$scenario3 &  data$Period == input$period3  &  data$Interface == input$interface3, data$Scope == input$scope3)\n    df <- filter(df, Processor %in% input$ProcessorsChoice, )\n    df$per<-round(df$Value/sum(df$Value)*100, digits = 3)\n    df$names_per <-paste(df$Processor,df$per,\"%\", sep = \" \")\n    plt <- ggplot (df, aes( x = \"\" ,  y = Value, fill = names_per)) + geom_bar(width = 1, stat = \"identity\")\n    pie <- plt + coord_polar(\"y\", start=0)\n    pie\n    \n  })\n  \n  \n  \n  \n  # #BarChart\n  #\n  # output$BarPlot <- renderPlot({\n  #\n  #   df<-filter(LE,LE$Scenario == input$scenario & LE$Period == input$period & LE$Processor == input$processor)\n  #   #remouving \".Input\" \".Output\" from interfaces\n  #   xx = c(names(df[-c(1,2,3,4)]))\n  #   x<-str_remove(xx,'.Output')\n  #   x<-str_remove(x,'.Input')\n  #   l<-x\n  #   names(l)<-x\n  #\n  #\n  #   if (input$log_10){\n  #     y = log10(abs(as.numeric(df[1,-c(1,2,3,4)])))*(abs(as.numeric(df[1,-c(1,2,3,4)]))/as.numeric(df[1,-c(1,2,3,4)]))\n  #   }\n  #   else{\n  #     y = as.numeric(df[1,-c(1,2,3,4)])\n  #   }\n  #\n  #   bar <-data.frame(x,y)\n  #   #ba   r<-filter(bar,bar$x %in% c(input$checkGroup))\n  #\n  #\n  #   # Fill in the spot we created for a plot\n  #\n  #   p = ggplot(bar, aes(x,y)) +\n  #     geom_bar(stat = \"identity\", aes(fill = x), legend = FALSE)\n  #   p+theme(axis.text.x = element_text(size = 10, angle = 90))\n  # })\n  \n  eum<-reactive({\n    data<-df_products_upload()\n    df<-filter(data,data$Scope == input$ScopeChoice, data$Scenario == input$ScenarioChoice , data$Period == input$PeriodChoice, data$System == input$SystemChoice)\n    # TODO needed?:\n    # if (length(df$Conflict) != 0){\n    #   df<-filter(df, df$Conflict != \"Dismissed\")\n    # }\n    eumflow <- filter(df, Interface %in% input$show_Interfaces, )\n    eumfund <- filter(df, df$Interface == input$FundInterface)\n    cat(class(eumflow))\n    \n    eum <- merge(x = eumflow,y = eumfund, by = \"Processor\")\n    eum$Valueeum <- eum$Value.x/eum$Value.y\n    eum$Valuepop<-eum$Value.x/input$Population\n    \n    eum$InterfaceUnit<-paste(paste(eum$Interface.x,eum$Interface.y,sep = \"/\"),paste(eum$Unit.x,eum$Unit.y,sep = \"/\"),sep=\" \")\n    eumInterface <- eum%>%select(Level.x,Processor, Valueeum,InterfaceUnit)%>% spread(InterfaceUnit,Valueeum)\n    eumInterface<-`colnames<-`(eumInterface,c(\"Level\", colnames(eumInterface[-1])))\n    \n    eumpop<-eum%>%select(Processor, Valuepop, Interface.x)%>% spread(Interface.x,Valuepop)\n    colnamesEumpop<-paste(colnames(eumpop)[-1], \"cap\", sep = \"/\")\n    eumpop<-`colnames<-`(eumpop,c(\"Processor\",colnamesEumpop))\n    \n    eum <- merge(eumpop,eumInterface, by = \"Processor\")\n    \n    #Merge fund column with unit\n    eumfund$Interface_Unit<-paste(eumfund$Interface, eumfund$Unit, sep = \" \")\n    eum<-merge(eumfund%>%select(Processor,Interface_Unit,Value)%>%unique(),eum, by = \"Processor\")\n    \n    \n    eum<-eum[order(eum$Level),]\n    \n  })\n  \n  \n  # TAB 5 EUM 1 -----\n  #Reactive Inputs\n  \n  output$FundInterface= renderUI({\n    data<- df_products_upload()\n    Fund<- filter(data, data$RoegenType == \"Fund\" | data$RoegenType == \"fund\")\n    FundInterfaces <- as.vector(unique(Fund$Interface))\n    selectInput(\"FundInterface\", \"Choose a Fund InterfaceType:\",\n                choices = FundInterfaces,selected = FundInterfaces[1])\n  })\n  \n  output$ScopeChoice = renderUI({\n    data<-df_products_upload()\n    Scopes<- as.vector(unique(data$Scope))\n    selectInput(\"ScopeChoice\", \"Choose a Scope:\",\n                choices = Scopes, selected = Scopes[1]) \n  })\n  \n  \n  output$ScenarioChoice = renderUI({\n    data<-df_products_upload()\n    Scenarios <- as.vector(unique(data$Scenario))\n    selectInput(\"ScenarioChoice\", \"Choose a Scenario:\",\n                choices = Scenarios)\n  })\n  output$PeriodChoice = renderUI({\n    data<-df_products_upload()\n    data$Period<-as.numeric(data$Period)\n    Periods<- as.vector(unique(data$Period))\n    selectInput(\"PeriodChoice\", \"Choose a Period:\",\n                choices = Periods, selected = Periods[length(Periods)])\n    \n  })\n  output$SystemChoice = renderUI({\n    data<-df_products_upload()\n    Systems<- as.vector (unique(data$System))\n    selectInput(\"SystemChoice\", \"Choose a System:\",\n                choices = Systems, selected = Systems[1])\n  })\n  \n  output$show_Interfaces = renderUI({\n    data<- df_products_upload()\n    Flow<- filter(data, data$RoegenType == \"flow\" | data$RoegenType == \"Flow\")\n    FlowInterfaces<- as.vector(unique(Flow$Interface))\n    checkboxGroupInput(\"show_Interfaces\", \"Choose a flow InterfaceType to show:\",\n                       choiceNames = FlowInterfaces, choiceValues = FlowInterfaces, selected = FlowInterfaces[1])\n  })\n  \n  \n  \n  # tabla EUM SIN FORMATO EXCEL (NO EN USO) --------\n  # output$eum<- DT::renderDataTable({\n  #   if (input$act==0)\n  #     return()\n  \n  #renderTable({\n  # eum()\n  #    })\n  \n  # })\n  \n  \n  \n  #TAB 6 EUM FORMATO EXCEL ----\n  \n  output$eum<-  renderExcel({\n    if (input$act==0)\n      return()\n    excelTable(data = eum())\n  })\n  \n  \n  # output$boxplot <- renderPlot({\n  #   # #renderTable({\n  #   # df<-filter(data,data$Scope == input$ScopeChoice, data$Scenario == input$ScenarioChoice , data$Period == input$PeriodChoice, data$System == input$SystemChoice)\n  #   # if (length(df$Conflict) != 0){\n  #   #   df<-filter(df, df$Conflict != \"Dismissed\")\n  #   # }\n  #   # eumflow <- filter(df, Interface %in% input$show_Interfaces, )\n  #   # eumfund <- filter(df, df$Interftace == input$FundInterface)\n  #   #\n  #   # eum <- merge(x = eumflow,y = eumfund, by = \"Processor\")\n  #   # eum$Valueeum <- eum$Value.x/eum$Value.y\n  #   # eum$Valuepop<-eum$Value.x/input$Population\n  #   #\n  #   # eum$InterfaceUnit<-paste(paste(eum$Interface.x,eum$Interface.y,sep = \"/\"),paste(eum$Unit.x,eum$Unit.y,sep = \"/\"),sep=\" \")\n  #   # eumInterface <- eum%>%select(Level.x,Processor, Valueeum,InterfaceUnit)%>% spread(InterfaceUnit,Valueeum)\n  #   # eumInterface<-`colnames<-`(eumInterface,c(\"Level\", colnames(eumInterface[-1])))\n  #   #\n  #   #\n  #   #\n  #   # eumpop<-eum%>%select(Processor, Valuepop, Interface.x)%>% spread(Interface.x,Valuepop)\n  #   # colnamesEumpop<-paste(colnames(eumpop)[-1], \"cap\", sep = \"/\")\n  #   # eumpop<-`colnames<-`(eumpop,c(\"Processor\",colnamesEumpop))\n  #   #\n  #   #\n  #   # eum <- merge(eumpop,eumInterface, by = \"Processor\")\n  #   #\n  #   # #Merge fund column with unit\n  #   # eumfund$Interface_Unit<-paste(eumfund$Interface, eumfund$Unit, sep = \" \")\n  #   # eum<-merge(eumfund%>%select(Processor,Interface_Unit,Value)%>%unique(),eum, by = \"Processor\")\n  #\n  #\n  #   Indicators<<- a\n  #   output<-paste(Indicatorshow,b,sep = \" \")\n  #   boxplot <- filter(eum, Processor %in% input$ProcessorsChoice, )\n  #   bp<- ggplot(boxplot, aes(x = Processor, y = input$Indicatorshow)) + geom_boxplot()\n  #   bp\n  #\n  # })\n  \n  \n  # TAB 8 INDICATORS ----\n  #Reactive input\n  output$indicator = renderUI({\n    eum <- eum()\n    ind <- colnames(eum[setdiff(names(eum), c(\"Processor\",\"Interface_Unit\",\"Value\", \"Level\"))])\n    selectInput(\"indicator\", \"Choose a indicator:\",\n                choices = ind)\n    \n  })\n  output$LevelIndicator = renderUI({\n    eum<-eum()\n    Levels<-as.vector(unique(eum$Level))\n    selectInput(\"LevelIndicator\", \"Choose a level to analize:\",\n                choices = Levels)\n    \n  })\n  \n  \n  #plot\n  \n  output$gaugePlot <- renderPlot({\n    if (input$act==0)\n      return()\n    eum <- eum()\n    eumlevel<-filter(eum,eum$Level == input$LevelIndicator)\n    eumindicator<- eumlevel[c(\"Processor\", input$indicator)]\n    gg.gauge(eumindicator,breaks = c(0,input$break2,input$break3,100))\n    #TODO problem displaying text.. bad visualization of text...\n  }, height = 400, width = 800 ) #this one seems to not change anything\n  \n  # TAB 7 TREE WITH QUANTITIES -----\n  #outputs\n  \n  output$ScopeTree = renderUI({\n    data<- df_products_upload()\n    Scopes<- as.vector(unique(data$Scope))\n    selectInput(\"ScopeTree\", \"Choose a Scope:\",\n                choices = Scopes)\n  })\n  \n  output$PeriodTree = renderUI({\n    data<-df_products_upload()\n    data$Period<-as.numeric(data$Period)\n    Periods<- as.vector(unique(data$Period))\n    selectInput(\"PeriodTree\", \"Choose a Period:\",\n                choices = Periods)\n  })\n  \n  \n  #tree Output\n  output$Tree<-renderCollapsibleTree({\n    if (input$act==0)\n      return()\n    #    isolate({\n    data<-df_products_upload()\n    Level <-as.vector(unique(data$Level))\n    datafilter<-filter(data,data$Scope == input$ScopeTree, data$Period == input$PeriodTree)\n    tree<-datafilter%>%separate(Processor,c(Level), sep= \"\\\\.\")\n    collapsibleTree(df = tree, c(Level), fill = \"green\", width = 800)\n    \n    #    })\n  })\n  \n  \n  \n  # TAB TREE 2 ----\n  # REACTIVE INPUTS\n  output$ScopeTree2 = renderUI({\n    data<- df_products_upload()\n    Scopes<- as.vector(unique(data$Scope))\n    selectInput(\"ScopeTree2\", \"Choose a Scope:\",\n                choices = Scopes)\n    \n  })\n  \n  output$PeriodTree2 = renderUI({\n    data<-df_products_upload()\n    data$Period<-as.numeric(data$Period)\n    Periods<- as.vector(unique(data$Period))\n    selectInput(\"PeriodTree2\", \"Choose a Period:\",\n                choices = Periods)\n    \n  })\n  \n  output$InterfaceTree2 = renderUI({\n    data<-df_products_upload()\n    Interfaces<- as.vector(unique(data$Interface))\n    selectInput(\"InterfaceTree2\", \"Choose an Interface:\",\n                choices = Interfaces)\n    \n  })\n  \n  \n  output$TreeInterface<-renderCollapsibleTree({\n    if (input$act==0)\n      return()\n    #    isolate({\n    data<-df_products_upload()\n    Level <-as.vector(unique(data$Level))\n    datafilter<-filter(data,data$Scope == input$ScopeTree2,data$Period == input$PeriodTree2, data$Interface == input$InterfaceTree2)\n    tree<-datafilter%>%separate(Processor,c(Level), sep= \"\\\\.\")\n    collapsibleTree(df = tree, c(Level),\n                    fill = \"green\",\n                    width = 800,\n                    # TODO controlar que el componente agregue desde el último nivel o no. En este momento está agregando aunque se le da todos los valores.\n                    # YA HE INTENTADO PONER aggfun = null PERO PARECE QUE SOLO ADMITE MEAN O SUM,,,, ESTO ES UN  PROBLEMA SOLO EN EL CASO DE CONFLICTO DE DATOS\n                    # YA QUE EN ESTE CASO SOLO SE LE DA EL RESULTADO AGREGADO BOTTON UP....\n                    zoomable = FALSE,\n                    tooltip = TRUE,\n                    attribute = \"Value\",\n                    nodeSize = \"Value\")\n    \n    #   })\n    \n    \n  })\n  output$Unit <- renderText({\n    if (input$act==0)\n      return()\n    data<- df_products_upload()\n    Unit<- paste(\"Unit\",filter(data,data$Interface == input$InterfaceTree2)$Unit[1],sep = \"=\")\n    \n  })  \n  \n  \n} #END",
    "created" : 1580459095980.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2918363449",
    "id" : "1DC8F79E",
    "lastKnownWriteTime" : 1580459302,
    "last_content_update" : 1580459302854,
    "path" : "~/Documentos/Shiny/Shiny-NIS2/server.R",
    "project_path" : "server.R",
    "properties" : {
        "source_window_id" : ""
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}