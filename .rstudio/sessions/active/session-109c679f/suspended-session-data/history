shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rm(list = ls())
# setwd("~/Documentos/Shiny/Shiny-NIS2")
library(dplyr)
library(ggplot2)
library(stringr)
library(rlist)
library(dplyr)
library(tidyr)
library("readxl")
library("collapsibleTree")
library(data.table)
library(excelR)
library("DT")
library(flexdashboard)
library(stringr)
library(reticulate)
nexinfosys <- import("nexinfosys")
use_python("/opt/conda/bin/python3")
nexinfosys <- import("nexinfosys")
nexinfosys <- import("nexinfosys")
nexinfosys <- import("nexinfosys")
use_python("/opt/conda/bin/python3")
nexinfosys <- import(nexinfosys)
nexinfosys <- import("nexinfosys")
library(reticulate)
use_python("/opt/conda/bin/python3")
nexinfosys <- import("nexinfosys")
library(ggplot2)
library(stringr)
library(rlist)
library(dplyr)
library(tidyr)
library("readxl")
library("collapsibleTree")
library(data.table)
library(excelR)
library("DT")
library(flexdashboard)
library(stringr)
library(reticulate)
#use_python("/opt/conda/bin/python3")
nexinfosys <- import("nexinfosys")
rm(list = ls())
# setwd("~/Documentos/Shiny/Shiny-NIS2")
library(dplyr)
library(ggplot2)
library(stringr)
library(rlist)
library(dplyr)
library(tidyr)
library("readxl")
library("collapsibleTree")
library(data.table)
library(excelR)
library("DT")
library(flexdashboard)
library(stringr)
library(reticulate)
nexinfosys <- import("nexinfosys")
rm(list = ls())
# setwd("~/Documentos/Shiny/Shiny-NIS2")
library(dplyr)
library(ggplot2)
library(stringr)
library(rlist)
library(dplyr)
library(tidyr)
library("readxl")
library("collapsibleTree")
library(data.table)
library(excelR)
library("DT")
library(flexdashboard)
library(stringr)
library(reticulate)
use_python("/opt/conda/bin/python3")
nexinfosys <- import("nexinfosys")
rm(list = ls())
# setwd("~/Documentos/Shiny/Shiny-NIS2")
library(dplyr)
library(ggplot2)
library(stringr)
library(rlist)
library(dplyr)
library(tidyr)
library("readxl")
library("collapsibleTree")
library(data.table)
library(excelR)
library("DT")
library(flexdashboard)
library(stringr)
library(reticulate)
use_python("/opt/conda/bin/python3")
pandas<-import("pandas")
nexinfosys <- import("nexinfosys")
rm(list = ls())
# setwd("~/Documentos/Shiny/Shiny-NIS2")
library(dplyr)
library(ggplot2)
library(stringr)
library(rlist)
library(dplyr)
library(tidyr)
library("readxl")
library("collapsibleTree")
library(data.table)
library(excelR)
library("DT")
library(flexdashboard)
library(stringr)
library(reticulate)
use_python("/opt/conda/bin/python3", required = TRUE)
nexinfosys <- import("nexinfosys")
py_config()
nexinfosys <- import("nexinfosys")
py_config()
py_discover_config()
rm(list = ls())
# setwd("~/Documentos/Shiny/Shiny-NIS2")
library(dplyr)
library(ggplot2)
library(stringr)
library(rlist)
library(dplyr)
library(tidyr)
library("readxl")
library("collapsibleTree")
library(data.table)
library(excelR)
library("DT")
library(flexdashboard)
library(stringr)
library(reticulate)
use_python("/opt/conda/bin/python3", required = TRUE)
nexinfosys <- import("nexinfosys")
runApp()
runApp()
library("renderRHandsontable")
library("renderRHandsontable")
runApp()
runApp()
runApp()
runApp()
runApp()
View(eum)
View(eum)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(totalEUM())
runApp()
View(ShortEUM())
runApp()
filter(eum,eum$Level == input$LevelIndicator)
filter(eum,eum$Level == input$LevelIndicator)
eumlevel[c("Processor", input$indicator)]
runApp()
filter(eum,eum$Level == input$LevelIndicator)
filter(eum,eum$Level == input$LevelIndicator)[c("Processor", input$indicator)]
filter(totalEUM(),totalEUM$Level == input$LevelIndicator)
filter(totalEUM(),totalEUM()$Level == input$LevelIndicator)
filter(eum,eum$Level == input$LevelIndicator,indicator == input$indicator)
filter(eum,eum$Level == input$LevelIndicator,eum$indicator == input$indicator)
input$indicator
eum
runApp()
filter(eum,eum$Level == input$LevelIndicator,indicator == input$indicator)
ShortEUM()
runApp()
runApp()
runApp()
runApp()
runApp()
filter(eum,eum$Level == input$LevelIndicator, eum$Scope == input$ScopeIndicator)
runApp()
eumlevel
eumlevel
eumlevel[c("Processor", input$indicator)]
input$indicator
eumlevel[c("Processor", "Agua/AsalariadosTC")]
runApp()
runApp()
runApp()
runApp()
filter(eum,eum$Level == input$LevelIndicator,indicator == input$indicator, eum$Scope == input$ScopeIndicator)
eumindicator
runApp()
eumindicator
(eumindicator[setdiff(names(eumindicator), "Processor")])
names(eumindicator)
eumindicator
eumindicator["value"]
eumindicator["Value"]
round(as.vector(unlist(eumindicator["Value"])),digits = 3)
runApp()
eumindicator
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
pi*(1-0/2)
cos(pi)
pi/(1-1/2)
th.start<-pi*(1-0/2)
th.end<-pi/(1-1/2)
l = 2
seq(th.start,th.end,length=l)
seq(th.start,th.end,length=100)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
